{"version":3,"sources":["t3-dal/api.ts","t2-bll/reducer.ts","t1-ui/Joke.tsx","t1-ui/ChuckNorrisPage.tsx","common/chucknorris.png","App.tsx","reportWebVitals.ts","t2-bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","cardsAPI","get","initialState","icon_url","id","url","value","Joke","jokeCard","img","className","src","alt","ChuckNorrisPage","useState","page","setPage","card","setCard","dispatch","useDispatch","cardChuck","useSelector","state","app","imgChuck","useEffect","fetchMoreData","prev","setTimeout","i","then","res","type","cards","data","next","dataLength","length","hasMore","scrollThreshold","loader","map","el","App","chuckLogo1","chuckLogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,oCACTC,iBAAiB,IAIRC,EAAW,WAEhB,OAAOL,EAASM,IAAc,WCAhCC,EAAiC,CACnCC,SAAU,GACVC,GAAI,GACJC,IAAK,GACLC,MAAO,I,OCEIC,EATkB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IACzC,OACI,sBAAKC,UAAU,cAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAI,YAAYF,UAAU,cACxCF,M,QCHAK,EAAkB,WAAO,IAAD,EAETC,mBAAS,GAFA,mBAE1BC,EAF0B,KAEpBC,EAFoB,OAGTF,mBAAmB,IAHV,mBAG1BG,EAH0B,KAGpBC,EAHoB,KAI3BC,EAAWC,cAEXC,EAAYC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,IAAIlB,SACrEmB,EAAWH,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,IAAIrB,YAE1EuB,qBAAU,WACNC,MACD,CAACZ,EAAMC,IAEVU,qBAAU,WAINL,GAFIH,GAAQ,SAACU,GAAD,4BAAwBA,GAAxB,CAA8BP,SAG3C,CAACA,EAAWN,IAGf,IAAMY,EAAgB,WAClBE,YAAW,WACP,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBX,GFAL,SAACA,GACJnB,IACK+B,MAAK,SAACC,GACHb,EAPkC,CAACc,KAAM,eAAgBC,MAOnCF,EAAIG,eED/B,OAGP,OACI,qBAAKzB,UAAU,iBAAf,SACI,cAAC,IAAD,CACI0B,KAAMT,EACNU,WAAYpB,EAAKqB,OACjBC,SAAS,EAETC,gBAAiB,IACjBC,OAAQ,4CANZ,SAQKxB,EAAKyB,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,CAAMnC,SAAUmC,EAAIlC,IAAKgB,YChDjD,MAA0B,wCCkB1BmB,MAZf,WACI,IAAMC,EAAaC,EACnB,OACI,sBAAKpC,UAAU,MAAf,UACI,8BACI,qBAAMC,IAAKkC,EAAYjC,IAAI,YAAYF,UAAU,gBAErD,cAAC,EAAD,QCCGqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCJRO,EAAcC,YAAgB,CAChChC,INasB,WAAkE,IAAjED,EAAgE,uDAAxDrB,EAAcuD,EAA0C,uCACvF,OAAQA,EAAOxB,MACX,IAAK,eACD,OAAO,2BAAIV,GAAUkC,EAAOvB,OAChC,QACI,OAAOX,MMfNmC,EAAQC,YAAYJ,EAAaK,YAAgBC,MCD9DC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BnB,M","file":"static/js/main.fc76469e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.chucknorris.io/jokes/',\r\n    withCredentials: true,\r\n})\r\n\r\n// api\r\nexport const cardsAPI = {\r\n    getCards() {\r\n        return instance.get<CardType>('random');\r\n\r\n    }\r\n}\r\n\r\n// types\r\nexport type CardType = {\r\n    icon_url: string\r\n    id : string\r\n    url : string\r\n    value : string\r\n}","import {cardsAPI, CardType} from \"../t3-dal/api\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nexport type ActionsType = setAppPageActionType\r\nexport type initialStateType = {\r\n    icon_url: string\r\n    id: string\r\n    url: string\r\n    value: string\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    icon_url: '',\r\n    id: '',\r\n    url: '',\r\n    value: ''\r\n}\r\n\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-CARD':\r\n            return {...state, ...action.cards}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type setAppPageActionType = ReturnType<typeof setAppPageAC>;\r\nexport const setAppPageAC = (cards: CardType) => ({type: 'APP/SET-CARD', cards} as const)\r\n\r\n// thunk\r\nexport const fetchCardsTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardsAPI.getCards()\r\n            .then((res) => {\r\n                dispatch(setAppPageAC(res.data))\r\n            })\r\n    }\r\n}","import React, {FC} from \"react\";\r\n\r\n\r\ntype ChuckPropsType = {\r\n    jokeCard: string\r\n    img: string\r\n}\r\n\r\nconst Joke: FC<ChuckPropsType> = ({jokeCard, img}) => {\r\n    return (\r\n        <div className=\"jokeWrapper\">\r\n            <img src={img} alt=\"ChuckFace\" className=\"ChuckFace\"/>\r\n            {jokeCard}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Joke;","import {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchCardsTC} from \"../t2-bll/reducer\";\r\nimport {AppRootStateType} from \"../t2-bll/store\";\r\nimport Joke from \"./Joke\";\r\nimport \"../App.css\"\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n\r\nexport const ChuckNorrisPage = () => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [card, setCard] = useState<string[]>([]);\r\n    const dispatch = useDispatch()\r\n\r\n    const cardChuck = useSelector<AppRootStateType, string>(state => state.app.value)\r\n    const imgChuck = useSelector<AppRootStateType, string>(state => state.app.icon_url)\r\n\r\n    useEffect(() => {\r\n        fetchMoreData()\r\n    }, [page, setPage])\r\n\r\n    useEffect(() => {\r\n        const loadMore = () => {\r\n            setCard((prev: string[]) => [...prev, cardChuck]);\r\n        }\r\n        cardChuck && loadMore()\r\n    }, [cardChuck, page])\r\n\r\n\r\n    const fetchMoreData = () => {\r\n        setTimeout(function(){\r\n            for (let i = 0; i < 10; i++) {\r\n                dispatch(fetchCardsTC())\r\n            }\r\n        }, 1500);\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapperContent\">\r\n            <InfiniteScroll\r\n                next={fetchMoreData}\r\n                dataLength={card.length}\r\n                hasMore={true}\r\n\r\n                scrollThreshold={0.95}\r\n                loader={<h2>Loading...</h2>}\r\n            >\r\n                {card.map((el): any => <Joke jokeCard={el} img={imgChuck}/>)}\r\n            </InfiniteScroll>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/chucknorris.8cef148e.png\";","import React from 'react';\nimport './App.css';\nimport {ChuckNorrisPage} from \"./t1-ui/ChuckNorrisPage\";\nimport chuckLogo from \"../src/common/chucknorris.png\"\n\n\nfunction App() {\n    const chuckLogo1 = chuckLogo;\n    return (\n        <div className=\"App\">\n            <div>\n                < img src={chuckLogo1} alt=\"ChuckLogo\" className=\"ChuckLogo\"/>\n            </div>\n            <ChuckNorrisPage/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionsType, appReducer} from \"./reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType = ActionsType;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AppActionType>\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./t2-bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}